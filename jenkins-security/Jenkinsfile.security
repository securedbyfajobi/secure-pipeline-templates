pipeline {
    agent any

    environment {
        SONAR_TOKEN = credentials('sonar-token')
        SNYK_TOKEN = credentials('snyk-token')
        DOCKER_REGISTRY = 'your-registry.com'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Security: Secret Scanning') {
            steps {
                script {
                    sh '''
                        # Install truffleHog if not present
                        if ! command -v trufflehog &> /dev/null; then
                            curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
                        fi

                        # Scan for secrets
                        trufflehog git file://. --json > secrets-report.json || true

                        # Check if secrets found
                        if [ -s secrets-report.json ]; then
                            echo "⚠️ Secrets detected in repository!"
                            cat secrets-report.json
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Security: SAST Scanning') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        script {
                            def scannerHome = tool 'SonarQube Scanner'
                            withSonarQubeEnv() {
                                sh "${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=${env.JOB_NAME} \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=${SONAR_HOST_URL} \
                                    -Dsonar.login=${SONAR_TOKEN}"
                            }
                        }
                    }
                }

                stage('Snyk Code Scan') {
                    steps {
                        sh '''
                            # Install Snyk CLI
                            npm install -g snyk

                            # Authenticate
                            snyk auth ${SNYK_TOKEN}

                            # Test for vulnerabilities
                            snyk code test --json > snyk-code-report.json || true

                            # Monitor project
                            snyk monitor || true
                        '''
                    }
                }
            }
        }

        stage('Build & Test') {
            steps {
                sh '''
                    # Build application
                    echo "Building application..."

                    # Run unit tests
                    echo "Running unit tests..."
                '''
            }
        }

        stage('Security: Container Scanning') {
            when {
                expression { fileExists('Dockerfile') }
            }
            steps {
                script {
                    sh '''
                        # Build Docker image
                        docker build -t ${JOB_NAME}:${BUILD_NUMBER} .

                        # Scan with Trivy
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            -v $(pwd):/tmp/trivy aquasec/trivy:latest \
                            image --format json --output /tmp/trivy/trivy-report.json \
                            ${JOB_NAME}:${BUILD_NUMBER}

                        # Check for critical vulnerabilities
                        CRITICAL_COUNT=$(cat trivy-report.json | jq '.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL") | length' | wc -l)

                        if [ "$CRITICAL_COUNT" -gt 0 ]; then
                            echo "❌ Critical vulnerabilities found: $CRITICAL_COUNT"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Security: DAST Scanning') {
            when {
                expression { env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'develop' }
            }
            steps {
                script {
                    sh '''
                        # Deploy to staging environment
                        echo "Deploying to staging for DAST..."

                        # Run OWASP ZAP baseline scan
                        docker run -t owasp/zap2docker-stable zap-baseline.py \
                            -t ${STAGING_URL} \
                            -J zap-report.json \
                            -w zap-report.md || true

                        # Process results
                        if [ -f zap-report.json ]; then
                            echo "DAST scan completed"
                        fi
                    '''
                }
            }
        }

        stage('Security: Compliance Gates') {
            steps {
                script {
                    // Quality gate check
                    timeout(time: 10, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }

                    // Custom security checks
                    sh '''
                        # Check security test coverage
                        SECURITY_COVERAGE=$(jq '.coverage.security' coverage-report.json 2>/dev/null || echo "0")

                        if (( $(echo "$SECURITY_COVERAGE < 80" | bc -l) )); then
                            echo "❌ Security test coverage below 80%: $SECURITY_COVERAGE%"
                            exit 1
                        fi

                        echo "✅ Security compliance checks passed"
                    '''
                }
            }
        }

        stage('Deploy') {
            when {
                expression { env.BRANCH_NAME == 'main' }
            }
            steps {
                script {
                    sh '''
                        echo "Deploying to production..."
                        # Add deployment steps here
                    '''
                }
            }
        }
    }

    post {
        always {
            // Archive security reports
            archiveArtifacts artifacts: '*-report.json, *-report.md', allowEmptyArchive: true

            // Publish test results
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: '.',
                reportFiles: 'zap-report.md',
                reportName: 'DAST Report'
            ])
        }

        failure {
            // Send security alert
            emailext (
                subject: "🚨 Security Pipeline Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                body: "Security checks failed in pipeline ${env.BUILD_URL}",
                to: "${env.SECURITY_EMAIL}"
            )
        }

        success {
            // Send success notification
            slackSend(
                channel: '#security',
                color: 'good',
                message: "✅ Security pipeline passed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            )
        }
    }
}